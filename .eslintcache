[{"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\index.js":"1","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\App.js":"2","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\Main.js":"3","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\header\\header.jsx":"4","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\button\\button.jsx":"5","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\slider\\slider.jsx":"6","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\checkbox\\checkbox.jsx":"7","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\utils\\helper.js":"8","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\containers\\display\\display.jsx":"9","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\containers\\container\\container.jsx":"10","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\tooltip\\tooltip.jsx":"11"},{"size":246,"mtime":1607180975081,"results":"12","hashOfConfig":"13"},{"size":146,"mtime":1607717269953,"results":"14","hashOfConfig":"13"},{"size":256,"mtime":1607717138758,"results":"15","hashOfConfig":"13"},{"size":302,"mtime":1607717760522,"results":"16","hashOfConfig":"13"},{"size":511,"mtime":1607352958754,"results":"17","hashOfConfig":"13"},{"size":1800,"mtime":1607717772504,"results":"18","hashOfConfig":"13"},{"size":999,"mtime":1607717748749,"results":"19","hashOfConfig":"13"},{"size":1583,"mtime":1607716218454,"results":"20","hashOfConfig":"13"},{"size":3799,"mtime":1607720346361,"results":"21","hashOfConfig":"13"},{"size":6227,"mtime":1607720225281,"results":"22","hashOfConfig":"13"},{"size":581,"mtime":1607717782997,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"bcqbh6",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\index.js",[],["49","50"],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\App.js",[],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\Main.js",[],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\header\\header.jsx",[],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\button\\button.jsx",[],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\slider\\slider.jsx",[],["51","52"],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\checkbox\\checkbox.jsx",[],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\utils\\helper.js",[],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\containers\\display\\display.jsx",[],"C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\containers\\container\\container.jsx",["53","54","55"],"import React, { useState, useEffect, useMemo } from \"react\";\n\nimport Slider from \"../../components/slider/slider\";\nimport Checkbox from \"../../components/checkbox/checkbox\";\nimport Button from \"../../components/button/button\";\nimport Tooltip from \"../../components/tooltip/tooltip\";\n\nimport {\n  generatePassword,\n  setPasswordLength,\n  copyToClipBoard,\n} from \"../../utils/helper\";\n\nimport \"./container.scss\";\n\nconst checkboxes = [\n  {\n    id: 0,\n    name: \"uppercase\",\n    label: \"Uppercase\",\n    isChecked: true,\n  },\n  {\n    id: 1,\n    name: \"lowercase\",\n    label: \"Lowercase\",\n    isChecked: true,\n  },\n  {\n    id: 2,\n    name: \"symbols\",\n    label: \"Symbols\",\n    isChecked: true,\n  },\n  {\n    id: 3,\n    name: \"numbers\",\n    label: \"Numbers\",\n    isChecked: true,\n  },\n];\n\nconst Container = (props) => {\n  const { setPassword, setRange, setPasswordProps, passwordRef, type } = props;\n\n  const [rangeValue, setRangeValue] = useState(12);\n  const [checkbox, setCheckbox] = useState({\n    uppercase: true,\n    lowercase: true,\n    symbols: true,\n    numbers: true,\n  });\n  const [checked, setChecked] = useState(false);\n  const [checkedName, setCheckedName] = useState(\"\");\n  const [tooltip, setTooltip] = useState(false);\n  const [minMaxValue, setMinMaxValue] = useState({\n    min: 1,\n    max: 60,\n  });\n\n  const { uppercase, lowercase, symbols, numbers } = checkbox;\n  const { min, max } = minMaxValue;\n\n  useEffect(() => {\n    setPasswordLength(rangeValue);\n    setRange(rangeValue);\n    setRangeValue(rangeValue);\n    passwordGenerated(checkbox, rangeValue);\n    checkBoxCount();\n  }, [uppercase, lowercase, symbols, numbers]);\n\n  const checkBoxCount = () => {\n    const checkedCount = Object.keys(checkbox).filter((key) => checkbox[key]);\n    const disabled = checkedCount.length === 1;\n    const name = checkedCount[0];\n    if (disabled) {\n      setChecked(disabled);\n      setCheckedName(name);\n    } else {\n      setChecked(false);\n      setCheckedName(\"\");\n    }\n  };\n\n  const passwordGenerated = (checkbox, rangeValue) => {\n    const pwd =\n      rangeValue > 3\n        ? generatePassword(checkbox, rangeValue)\n        : generatePassword(checkbox, 3);\n    setPassword(pwd);\n    setPasswordProps(checkbox);\n  };\n\n  const updateCheckboxes = () => {\n    if (type === \"pin\") {\n      checkboxes.map((checkbox) => {\n        const name = checkbox.name;\n        if (name !== \"numbers\") {\n          checkbox.isChecked = false;\n          const checkboxProps = {\n            name,\n            checkedName: name,\n            checked: true,\n            isChecked: checkbox.isChecked,\n            min: 0,\n            max: 15,\n            length: 3,\n          };\n          checkboxProperties(checkboxProps);\n        }\n        return \"\";\n      });\n    } else {\n      checkboxes.map((checkbox) => {\n        const name = checkbox.name;\n        checkbox.isChecked = true;\n        const checkboxProps = {\n          name,\n          checkedName: name,\n          checked: true,\n          isChecked: checkbox.isChecked,\n          min: 1,\n          max: 60,\n          length: 12,\n        };\n        checkboxProperties(checkboxProps);\n        return \"\";\n      });\n    }\n  };\n\n  const checkboxProperties = (checkboxProps) => {\n    const {\n      name,\n      checked,\n      isChecked,\n      checkedName,\n      min,\n      max,\n      length,\n    } = checkboxProps;\n    setCheckbox((prevState) => ({\n      ...prevState,\n      [name]: isChecked,\n    }));\n    setChecked(checked);\n    setCheckedName(checkedName);\n    setPasswordLength(length);\n    setMinMaxValue({ min, max });\n    setRange(length);\n    setRangeValue(length);\n  };\n\n  const onChangeSlider = (e) => {\n    setRangeValue(e.target.value);\n    setPasswordLength(e.target.value);\n    setRange(e.target.value);\n    passwordGenerated(checkbox, e.target.value);\n  };\n\n  const onChangeCheckbox = (e) => {\n    if (type !== \"pin\") {\n      let { name, checked } = e.target;\n      checkboxes.map((checkbox) => {\n        if (checkbox.name === name) {\n          checkbox.isChecked = checked;\n          setCheckbox((prevState) => ({\n            ...prevState,\n            [name]: checkbox.isChecked,\n          }));\n          setPasswordLength(rangeValue);\n          setRange(rangeValue);\n        }\n        return \"\";\n      });\n    } else {\n    }\n  };\n\n  const copyClipBoard = (elementRef) => (e) => {\n    e.preventDefault();\n    copyToClipBoard(elementRef);\n    setTooltip(true);\n    setTimeout(() => {\n      setTooltip(false);\n    }, 1000);\n  };\n\n  useMemo(updateCheckboxes, [type]);\n\n  return (\n    <div className=\"password-settings\">\n      <h3>Use the slider, and select from the options</h3>\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <div className=\"form-group\">\n            &nbsp;\n            <Slider\n              min={parseInt(min, 10)}\n              max={parseInt(max, 10)}\n              step={1}\n              value={parseInt(rangeValue, 10)}\n              onChangeValue={onChangeSlider}\n              defaultLenght={parseInt(rangeValue, 10)}\n            />\n          </div>\n        </div>\n        <div className=\"col-md-12\">\n          <div className=\"row checkbox-container\">\n            {checkboxes.map((checkbox) => (\n              <Checkbox\n                key={checkbox.id}\n                name={checkbox.name}\n                checked={checkbox.isChecked}\n                label={checkbox.label}\n                value={checkbox.isChecked}\n                onChange={onChangeCheckbox}\n                disabled={\n                  checkbox &&\n                  checkbox.isChecked &&\n                  checkedName === checkbox.name\n                }\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      <br />\n      <div className=\"text-center\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Button\n              myClassName={\"btn btn-password\"}\n              label={\"Copy password\"}\n              handleClick={copyClipBoard(passwordRef.current)}\n            />\n            <Tooltip\n              message=\"Copied\"\n              position=\"bottom\"\n              displayTooltip={tooltip}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n","C:\\Users\\edgar.erenberg\\Desktop\\QuantLabs\\Free Development\\React Apps\\passwordGenerator\\src\\components\\tooltip\\tooltip.jsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"56","replacedBy":"60"},{"ruleId":"58","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":53,"column":10,"nodeType":"64","messageId":"65","endLine":53,"endColumn":17},{"ruleId":"66","severity":1,"message":"67","line":70,"column":6,"nodeType":"68","endLine":70,"endColumn":46,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":189,"column":29,"nodeType":"68","endLine":189,"endColumn":35,"suggestions":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],"no-unused-vars","'checked' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkBoxCount', 'checkbox', 'passwordGenerated', 'rangeValue', and 'setRange'. Either include them or remove the dependency array. You can also do a functional update 'setRangeValue(r => ...)' if you only need 'rangeValue' in the 'setRangeValue' call.","ArrayExpression",["74"],"React Hook useMemo has a missing dependency: 'checkboxProperties'. Either include it or remove the dependency array.",["75"],"no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},{"desc":"78","fix":"79"},"Update the dependencies array to be: [uppercase, lowercase, symbols, numbers, rangeValue, setRange, passwordGenerated, checkbox, checkBoxCount]",{"range":"80","text":"81"},"Update the dependencies array to be: [checkboxProperties, type]",{"range":"82","text":"83"},[1593,1633],"[uppercase, lowercase, symbols, numbers, rangeValue, setRange, passwordGenerated, checkbox, checkBoxCount]",[4505,4511],"[checkboxProperties, type]"]